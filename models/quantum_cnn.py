import cirq
import sympy
import numpy as np
import tensorflow as tf
import tensorflow_quantum as tfq
from tensorflow.keras import layers
from tensorflow.keras import models
from tensorflow.keras.metrics import Precision, Recall, AUC

Q_SIZE = 4
THRESHOLD = 0.5


class CircuitLayerBuilder:
    def __init__(self, data_qubits, readout):
        self.data_qubits = data_qubits
        self.readout = readout

    def add_layer(self, circuit, gate, prefix):
        for i, qubit in enumerate(self.data_qubits):
            symbol = sympy.Symbol(prefix + '-' + str(i))
            circuit.append(gate(qubit, self.readout) ** symbol)


def create_qnn_model():
    """Create a QNN model circuit and readout operation to go along with it."""
    data_qubits = cirq.GridQubit.rect(Q_SIZE, Q_SIZE)  # a 4x4 grid.
    readout = cirq.GridQubit(-1, -1)  # a single qubit at [-1,-1]
    circ = cirq.Circuit()

    # Prepare the readout qubit.
    circ.append(cirq.X(readout))
    circ.append(cirq.H(readout))

    builder = CircuitLayerBuilder(data_qubits=data_qubits, readout=readout)

    # Then add layers (TODO experiment by adding more).
    builder.add_layer(circ, cirq.XX, "xx1")
    builder.add_layer(circ, cirq.ZZ, "zz1")

    # Finally, prepare the readout qubit.
    circ.append(cirq.H(readout))

    return circ, cirq.Z(readout)


def convert_to_circuit(image):
    """Encode truncated classical image into quantum datapoint."""
    values = np.ndarray.flatten(image)
    qubits = cirq.GridQubit.rect(Q_SIZE, Q_SIZE)
    circuit = cirq.Circuit()
    for i, value in enumerate(values):
        if value:
            circuit.append(cirq.X(qubits[i]))
    return circuit


class QuantumCNN:

    def __init__(self, num_classes, img_size, channels, name="quantum_malware_classifier"):
        self.name = name
        self.num_classes = num_classes
        self.input_width_height = img_size
        self.channels = channels
        self.input_type = 'images'
        self.model_circuit, self.model_readout = create_qnn_model()

    def build(self):
        model = models.Sequential()
        model.add(layers.Input(shape=(), dtype=tf.string))
        model.add(tfq.layers.PQC(self.model_circuit, self.model_readout))
        model.add(layers.Dense(self.num_classes, activation='softmax'))
        model.compile(loss='categorical_crossentropy', optimizer='adam',
                      metrics=['acc', Precision(name="prec"), Recall(name="rec"), AUC(name='auc')])

        return model
